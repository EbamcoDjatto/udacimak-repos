{
  "data": {
    "lesson": {
      "id": 673544,
      "key": "85771009-48c2-41c2-82de-38770d0594cb",
      "title": "Intro to Object-Oriented Programming",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": null,
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/85771009-48c2-41c2-82de-38770d0594cb/673544/1544037979188/Intro+to+Object-Oriented+Programming+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/85771009-48c2-41c2-82de-38770d0594cb/673544/1544037976660/Intro+to+Object-Oriented+Programming+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 673545,
          "key": "ce32b571-c946-472d-9dde-351c5003a108",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce32b571-c946-472d-9dde-351c5003a108",
            "completed_at": "2020-03-27T20:10:29.471Z",
            "last_viewed_at": "2020-03-27T20:10:27.677Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673556,
              "key": "3224a58d-b2a3-407c-9ff7-8f92f24f996b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why Object-Oriented Programming?\n\nObject-oriented programming has a few benefits over procedural programming, which is the programming style you first learned. \n\n- Object-oriented programming allows you to create large, modular programs that can easily expand over time.\n- Object-oriented programs hide implementation from the end-user\n\n\nConsider Python package like [scikit-learn](https://github.com/scikit-learn/scikit-learn), [pandas](https://pandas.pydata.org/), or [numpy](http://www.numpy.org/). These are all Python libraries built with object-oriented programming. Scikit-learn, for example, is a relatively large and complex package built with object-oriented programming. This package has expanded over the years with new functionality and new algorithms.\n\nWhen you train a machine learning algorithm with scikit-learn, you don't have to know anything about how the algorithm's code. \n\nHere's an example taken from the [scikit-learn website](http://scikit-learn.org/stable/modules/svm.html):\n```\nfrom sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = svm.SVC()\nclf.fit(X, y)  \n```\n\nHow does scikit-learn train the SVM model? You don't need to know because the implementation is hidden with object-oriented programming. (Whether or not you SHOULD understand how SVM works is a different question).\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 598838,
          "key": "c942f1be-2e40-4632-b48e-69611a08d2d0",
          "title": "Procedural vs. Object-Oriented Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c942f1be-2e40-4632-b48e-69611a08d2d0",
            "completed_at": "2020-03-27T20:13:05.192Z",
            "last_viewed_at": "2020-03-27T20:13:03.667Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 608585,
              "key": "43d04e6d-4884-4bbf-a17d-ac87e265d72e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Procedural vs Object-Oriented Programming",
              "instructor_notes": ""
            },
            {
              "id": 713527,
              "key": "7ca070f7-a0ad-4f37-9d6f-2c9437ffbd8e",
              "title": "L3 02 Proced Vs OOP V1 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "psXD_J8FnCQ",
                "china_cdn_id": "psXD_J8FnCQ.mp4"
              }
            },
            {
              "id": 608602,
              "key": "c3c3e685-866e-4dfd-b898-1feecb4403a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Objects are defined by characteristics and actions\n\nHere is a reminder of what is a characteristic and what is an action.",
              "instructor_notes": ""
            },
            {
              "id": 677045,
              "key": "6ea76154-d212-4eb5-9edf-7d64fc87724b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b511a90_screen-shot-2018-07-19-at-4.05.25-pm/screen-shot-2018-07-19-at-4.05.25-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ea76154-d212-4eb5-9edf-7d64fc87724b",
              "caption": "Objects are defined by their characteristics and their actions",
              "alt": "characteristics vs actions",
              "width": 770,
              "height": 398,
              "instructor_notes": null
            },
            {
              "id": 598844,
              "key": "4e19da30-ed3e-44e2-b007-785c3f42529c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Characteristics and Actions in English Grammar\n\nAnother way to think about characteristics and actions is in terms of English grammar. A characteristic would be a noun. On the other hand, an action would be a verb. \n\nLet's pick something from the real-world: a dog. A few characteristics could be the dog's weight, color, breed, and height. These are all nouns. What actions would a dog take? A dog can bark, run, bite and eat. These are all verbs.\n",
              "instructor_notes": ""
            },
            {
              "id": 598842,
              "key": "9dfe2884-2569-456d-ab1d-1c17d8eb32b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quizzes - Characteristics versus Actions",
              "instructor_notes": ""
            },
            {
              "id": 598841,
              "key": "d0bf333a-07f5-46bb-92ce-121a426fa4c6",
              "title": "Characteristics of an Object",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d0bf333a-07f5-46bb-92ce-121a426fa4c6",
                "completed_at": "2020-03-27T20:14:22.921Z",
                "last_viewed_at": "2020-03-27T20:14:22.921Z",
                "unstructured": "{\"selected_ids\":[\"a1523649290619\",\"a1523649345982\",\"a1523649347215\",\"a1523649389063\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "Which of the following would you consider to be characteristics of a tree object?",
                "answers": [
                  {
                    "id": "a1523649290619",
                    "text": "height",
                    "is_correct": true
                  },
                  {
                    "id": "a1523649345982",
                    "text": "color",
                    "is_correct": true
                  },
                  {
                    "id": "a1523649346454",
                    "text": "to grow",
                    "is_correct": false
                  },
                  {
                    "id": "a1523649347215",
                    "text": "width",
                    "is_correct": true
                  },
                  {
                    "id": "a1523649381575",
                    "text": "to fall down",
                    "is_correct": false
                  },
                  {
                    "id": "a1523649389063",
                    "text": "species",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 598843,
              "key": "f619af9a-470f-4a6a-932b-dccec97c23ec",
              "title": "Identify the Actions",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f619af9a-470f-4a6a-932b-dccec97c23ec",
                "completed_at": "2020-03-27T20:14:19.087Z",
                "last_viewed_at": "2020-03-27T20:14:19.087Z",
                "unstructured": "{\"selected_ids\":[\"a1523650249160\",\"a1523650250656\",\"a1523650274301\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "Which of the following would be considered actions for a laptop computer object?",
                "answers": [
                  {
                    "id": "a1523649619299",
                    "text": "memory",
                    "is_correct": false
                  },
                  {
                    "id": "a1523650248622",
                    "text": "width",
                    "is_correct": false
                  },
                  {
                    "id": "a1523650249160",
                    "text": "to turn on",
                    "is_correct": true
                  },
                  {
                    "id": "a1523650249912",
                    "text": "operating system",
                    "is_correct": false
                  },
                  {
                    "id": "a1523650250656",
                    "text": "to turn off",
                    "is_correct": true
                  },
                  {
                    "id": "a1523650254710",
                    "text": "thickness",
                    "is_correct": false
                  },
                  {
                    "id": "a1523650273208",
                    "text": "weight",
                    "is_correct": false
                  },
                  {
                    "id": "a1523650274301",
                    "text": "to erase",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 598845,
          "key": "9a937f8b-efd3-4381-ada2-1ffd5382ec93",
          "title": "Class, Object, Method and Attribute",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9a937f8b-efd3-4381-ada2-1ffd5382ec93",
            "completed_at": "2020-03-27T20:15:07.877Z",
            "last_viewed_at": "2020-03-27T20:15:07.163Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 608586,
              "key": "2d2b9650-da21-428c-a960-3d899918d750",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Class, object, method, attribute",
              "instructor_notes": ""
            },
            {
              "id": 713528,
              "key": "18cc5542-5d2d-4893-912e-5400b00026e6",
              "title": "L3 03 Class Obj Methods Attributes V1 1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yvVMJt09HuA",
                "china_cdn_id": "yvVMJt09HuA.mp4"
              }
            },
            {
              "id": 608605,
              "key": "459cbbd0-7fa8-4774-845d-86f36845fa27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Object-Oriented Programming (OOP) Vocabulary\n* class - a blueprint consisting of methods and attributes\n* object - an *instance* of a class. It can help to think of objects as something in the real world like a yellow pencil, a small dog, a blue shirt, etc. However, as you'll see later in the lesson, objects can be more abstract.\n* attribute - a descriptor or characteristic. Examples would be color, length, size, etc. These attributes can take on specific values like blue, 3 inches, large, etc.\n* method - an action that a class or object could take\n* OOP - a commonly used abbreviation for object-oriented programming\n* encapsulation - one of the fundamental ideas behind object-oriented programming is called encapsulation: you can combine functions and data all into a single entity. In object-oriented programming, this single entity is called a class. Encapsulation allows you to hide implementation details much like how the scikit-learn package hides the implementation of machine learning algorithms.\n\nIn English, you might hear an attribute described as a *property*, *description*, *feature*, *quality*, *trait*, or *characteristic*. All of these are saying the same thing.\n\nHere is a reminder of how a class, object, attributes and methods relate to each other.",
              "instructor_notes": ""
            },
            {
              "id": 677046,
              "key": "8c228f27-5382-468b-92ee-03fe5ebd50a5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b511ad5_screen-shot-2018-07-19-at-4.06.55-pm/screen-shot-2018-07-19-at-4.06.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c228f27-5382-468b-92ee-03fe5ebd50a5",
              "caption": "A class is a blueprint consisting of attributes and methods.",
              "alt": "classes versus objects",
              "width": 770,
              "height": 389,
              "instructor_notes": null
            },
            {
              "id": 608606,
              "key": "dfe3f5c6-5643-412b-a04c-e4c2e2897961",
              "title": "Match words and descriptions",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dfe3f5c6-5643-412b-a04c-e4c2e2897961",
                "completed_at": "2020-03-27T20:16:24.714Z",
                "last_viewed_at": "2020-03-27T20:16:32.662Z",
                "unstructured": "{\"answer_ids\":[\"a1524009544286\",\"a1524009734091\",\"a1524009826120\",\"a1524009947803\",\"a1524010033994\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the vocabulary term on the left with the examples on the right."
                },
                "concepts_label": "Term",
                "answers_label": "Examples",
                "concepts": [
                  {
                    "text": "Object",
                    "correct_answer": {
                      "id": "a1524009544286",
                      "text": "Stephen Hawking, Angela Merkel, Brad Pitt"
                    }
                  },
                  {
                    "text": "Class",
                    "correct_answer": {
                      "id": "a1524009734091",
                      "text": "scientist, chancellor, actor"
                    }
                  },
                  {
                    "text": "Attribute",
                    "correct_answer": {
                      "id": "a1524009826120",
                      "text": "color, size, shape"
                    }
                  },
                  {
                    "text": "Method",
                    "correct_answer": {
                      "id": "a1524009947803",
                      "text": "to rain, to ring, to ripen"
                    }
                  },
                  {
                    "text": "Value",
                    "correct_answer": {
                      "id": "a1524010033994",
                      "text": "gray, large, round"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1524009734091",
                    "text": "scientist, chancellor, actor"
                  },
                  {
                    "id": "a1524010033994",
                    "text": "gray, large, round"
                  },
                  {
                    "id": "a1524009544286",
                    "text": "Stephen Hawking, Angela Merkel, Brad Pitt"
                  },
                  {
                    "id": "a1524009947803",
                    "text": "to rain, to ring, to ripen"
                  },
                  {
                    "id": "a1524009826120",
                    "text": "color, size, shape"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 608615,
          "key": "6e899a3c-4ea6-417e-beeb-059feb2e2956",
          "title": "OOP Syntax",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6e899a3c-4ea6-417e-beeb-059feb2e2956",
            "completed_at": "2020-03-27T20:16:50.339Z",
            "last_viewed_at": "2020-03-27T20:16:49.587Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 608617,
              "key": "72c83216-cca1-4a8f-a07c-da2349150230",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Object-Oriented Programming Syntax\n\nIn this video, you'll see what a class and object look like in Python. In the next section, you'll have the chance to play around with the code. And then you will write your own class.",
              "instructor_notes": ""
            },
            {
              "id": 628508,
              "key": "ed72ff24-d0bd-46f2-8496-536f1cd4ebeb",
              "title": "Object Oriented Programming Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Y8ZVw1LHI8E",
                "china_cdn_id": "Y8ZVw1LHI8E.mp4"
              }
            },
            {
              "id": 669433,
              "key": "55ff77f5-5d77-495e-bdf6-ef569e034489",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Function vs Method\n\n_In the video above at 1:44, the dialogue mistakenly calls __init__ a function rather than a method. Why is __init__ not a function?_\n\nA function and a method look very similar. They both use the `def` keyword. They also have inputs and return outputs. The difference is that a method is inside of a class whereas a function is outside of a class.",
              "instructor_notes": ""
            },
            {
              "id": 669438,
              "key": "88ebc056-9811-495f-bdac-460291b0cbbf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is self?\n\nIf you instantiate two objects, how does Python differentiate between these two objects?\n\n```\nshirt_one = Shirt('red', 'S', 'short-sleeve', 15)\nshort_two = Shirt('yellow', 'M', 'long-sleeve', 20)\n```\n\nThat's where `self` comes into play. If you call the `change_price` method on shirt_one, how does Python know to change the price of shirt_one and not of shirt_two? \n\n```\nshirt_one.change_price(12)\n```\n\nBehind the scenes, Python is calling the `change_price` method:\n```\n    def change_price(self, new_price):\n    \n        self.price = new_price\n```\n\n`Self` tells Python where to look in the computer's memory for the shirt_one object. And then Python changes the price of the shirt_one object. When you call the `change_price` method, `shirt_one.change_price(12)`, `self` is implicitly passed in.\n\nThe word `self` is just a convention. You could actually use any other name as long as you are consistent; however, you should always use `self` rather than some other word or else you might confuse people.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 608607,
          "key": "c3c8eb3c-5af6-4b00-82c6-f188d7be8477",
          "title": "Exercise: OOP Syntax Practice - Part 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3c8eb3c-5af6-4b00-82c6-f188d7be8477",
            "completed_at": "2020-03-27T20:17:36.629Z",
            "last_viewed_at": "2020-03-27T20:38:54.686Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613066,
              "key": "14e518bd-7b13-420f-bdd4-ff5872711b7a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "dd684ef5-4af2-4a5d-bc47-fae2ae3625d0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/1.OOP_syntax_shirt_practice/shirt_exercise.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 621424,
          "key": "a286cfb1-ce38-4f82-b7ce-857ed24411ad",
          "title": "A Couple of Notes about OOP",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a286cfb1-ce38-4f82-b7ce-857ed24411ad",
            "completed_at": "2020-03-27T20:30:18.786Z",
            "last_viewed_at": "2020-03-27T20:30:17.318Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 621560,
              "key": "1ecc380b-f249-49e6-b614-2879f09ec6da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Notes About OOP\n\n",
              "instructor_notes": ""
            },
            {
              "id": 628509,
              "key": "e3e78c54-64fc-4a2c-b8bb-b22be7221c55",
              "title": "Notes On OOP",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NcgDIWm6iBA",
                "china_cdn_id": "NcgDIWm6iBA.mp4"
              }
            },
            {
              "id": 669445,
              "key": "b3049975-9eb5-4441-8f4f-3702ad01241b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Set and Get methods\n\nThe last part of the video mentioned that accessing attributes in Python can be somewhat different than in other programming languages like Java and C++. This section goes into further detail.\n\nThe shirt class has a method to change the price of the shirt: `shirt_one.change_price(20)`. In Python, you can also change the values of an attribute with the following syntax:\n\n```python\nshirt_one.price = 10\nshirt_one.price = 20\nshirt_one.color = 'red'\nshirt_one.size = 'M'\nshirt_one.style = 'long_sleeve'\n```\n\nThis code accesses and changes the price, color, size and style attributes directly. Accessing attributes directly would be frowned upon in many other languages **but not in Python**. Instead, the general object-oriented programming convention is to use methods to access attributes or change attribute values. These methods are called set and get methods or setter and getter methods.\n\nA get method is for obtaining an attribute value. A set method is for changing an attribute value. If you were writing a Shirt class, the code could look like this:\n\n```\nclass Shirt:\n\n    def __init__(self, shirt_color, shirt_size, shirt_style, shirt_price):\n        self._price = shirt_price\n    \n    def get_price(self):\n      return self._price\n    \n    def set_price(self, new_price):\n      self._price = new_price\n``` \n\nInstantiating and using an object might look like this:\n```\nshirt_one = Shirt('yellow', 'M', 'long-sleeve', 15)\nprint(shirt_one.get_price())\nshirt_one.set_price(10)\n```\n\nIn the class definition, the underscore in front of price is a somewhat controversial Python convention. In other languages like C++ or Java, price could be explicitly labeled as a private variable. This would prohibit an object from accessing the price attribute directly like `shirt_one._price = 15`. However, Python does not distinguish between private and public variables like other languages. Therefore, there is some controversy about using the underscore convention as well as get and set methods in Python. Why use get and set methods in Python when Python wasn't designed to use them?\n\nAt the same time, you'll find that some Python programmers develop object-oriented programs using get and set methods anyway. Following the Python convention, the underscore in front of price is to let a programmer know that price should only be accessed with get and set methods rather than accessing price directly with `shirt_one._price`.  However, a programmer could still access _price directly because there is nothing in the Python language to prevent the direct access.\n\nTo reiterate, a programmer could technically still do something like `shirt_one._price = 10`, and the code would work. But accessing price directly, in this case, would not be following the intent of how the Shirt class was designed.",
              "instructor_notes": ""
            },
            {
              "id": 713498,
              "key": "54cdff20-0a89-4e17-bced-3e396c5a96f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One of the benefits of set and get methods is that, as previously mentioned in the course, you can hide the implementation from your user. Maybe originally a variable was coded as a list and later became a dictionary. With set and get methods, you could easily change how that variable gets accessed. Without set and get methods, you'd have to go to every place in the code that accessed the variable directly and change the code.\n\nYou can read more about get and set methods in Python on this [Python Tutorial site](https://www.python-course.eu/python3_properties.php).",
              "instructor_notes": ""
            },
            {
              "id": 621428,
              "key": "0fcc016e-9c6d-4996-b4f0-ef6dde864253",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A Note about Attributes\n\n",
              "instructor_notes": ""
            },
            {
              "id": 621430,
              "key": "979cbbc8-bbd9-4cee-88f1-848dcb8cf994",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are some drawbacks to accessing attributes directly versus writing a method for accessing attributes. \n\nIn terms of object-oriented programming, the rules in Python are a bit looser than in other programming languages. As previously mentioned, in some languages, like C++, you can explicitly state whether or not an object should be allowed to change or access an attribute's values directly. Python does not have this option.\n\nWhy might it be better to change a value with a method instead of directly? Changing values via a method gives you more flexibility in the long-term. What if the units of measurement change, like the store was originally meant to work in US dollars and now has to handle Euros? Here's an example:",
              "instructor_notes": ""
            },
            {
              "id": 621431,
              "key": "dd7c3156-5589-4eb5-a8ce-65c8211c345a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Example Dollars versus Euros\nIf you've changed attribute values directly, you'll have to go through your code and find all the places where US dollars were used, like:\n```python\nshirt_one.price = 10 # US dollars\n```\n\nand then manually change to Euros\n```python\nshirt_one.price = 8 # Euros\n```\n\nIf you had used a method, then you would only have to change the method to convert from dollars to Euros.\n\n```python\n\ndef change_price(self, new_price):\n    self.price = new_price * 0.81 # convert dollars to Euros\n\nshirt_one.change_price(10)\n``` \n\nFor the purposes of this introduction to object-oriented programming, you will not need to worry about updating attributes directly versus with a method; however, if you decide to further your studies of object-oriented programming, especially in another language such as C++ or Java, you'll have to take this into consideration.",
              "instructor_notes": ""
            },
            {
              "id": 621476,
              "key": "dbc5512e-90bd-4a9a-978f-820e0c99a10c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modularized Code\n\nThus far in the lesson, all of the code has been in Jupyter Notebooks. For example, in the previous exercise, a code cell loaded the Shirt class, which gave you access to the Shirt class throughout the rest of the notebook; however, if you were developing a software program, you would want to modularize this code.\n\nYou would put the Shirt class into its own Python script called, say, shirt.py. And then in another Python script, you would import the Shirt class with a line like:\n`from shirt import Shirt`.\n\nFor now, as you get used to OOP syntax, you'll be completing exercises in Jupyter notebooks. But midway through the lesson, you'll modularize object-oriented code into separate files.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 613064,
          "key": "dc076341-4118-420c-a907-9cac2dbc4fa4",
          "title": "Exercise: OOP Syntax Practice - Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc076341-4118-420c-a907-9cac2dbc4fa4",
            "completed_at": "2020-03-27T20:35:21.426Z",
            "last_viewed_at": "2020-03-27T20:35:19.826Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613069,
              "key": "74fcdfef-1479-43f1-b0df-5b08d99fc084",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "081ae8b1-d51d-488c-897b-0c333f3d46b9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/2.OOP_syntax_pants_practice/exercise.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 613086,
          "key": "c3fb617a-64f4-4427-9cfe-7c4a9e928a5b",
          "title": "Commenting Object-Oriented Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3fb617a-64f4-4427-9cfe-7c4a9e928a5b",
            "completed_at": "2020-03-28T02:50:24.462Z",
            "last_viewed_at": "2020-03-28T02:50:23.371Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613510,
              "key": "c112709f-2d10-4e31-8f0a-b377626840c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Commenting Object-Oriented Code\n\nDid you notice anything special about the answer key in the previous exercise? The Pants class and the SalesPerson class contained docstrings! A docstring is a type of comment that describes how a Python module, function, class or method  works. Docstrings, therefore, are not unique to object-oriented programming. This section of the course is merely reminding you to use docstrings and to comment your code. It's not just going to help you understand and maintain your code. It will also make you a better job candidate.\n\nFrom this point on, please always comment your code. Use both in-line comments and document level comments as appropriate.\n\nCheck out this [link](http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) to read more about docstrings.\n",
              "instructor_notes": ""
            },
            {
              "id": 613512,
              "key": "52982b9f-4d7f-45cb-83b1-0a903179ed05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Docstrings and Object-Oriented Code\n\nBelow is an example of a class with docstrings and a few things to keep in mind:\n* Make sure to indent your docstrings correctly or the code will not run. A docstring should be indented one indentation underneath the class or method being described.\n* You don't have to define 'self' in your method docstrings. It's understood that any method will have self as the first method input.\n\n```python\nclass Pants:\n    \"\"\"The Pants class represents an article of clothing sold in a store\n    \"\"\"\n    \n    def __init__(self, color, waist_size, length, price):\n        \"\"\"Method for initializing a Pants object\n    \n        Args: \n            color (str)\n            waist_size (int)\n            length (int)\n            price (float)\n            \n        Attributes:\n            color (str): color of a pants object\n            waist_size (str): waist size of a pants object\n            length (str): length of a pants object\n            price (float): price of a pants object\n        \"\"\"\n            \n        self.color = color\n        self.waist_size = waist_size\n        self.length = length\n        self.price = price\n    \n    def change_price(self, new_price):\n        \"\"\"The change_price method changes the price attribute of a pants object\n    \n        Args: \n            new_price (float): the new price of the pants object\n            \n        Returns: None\n        \n        \"\"\"\n        self.price = new_price\n    \n    def discount(self, percentage):\n        \"\"\"The discount method outputs a discounted price of a pants object\n\n        Args:\n            percentage (float): a decimal representing the amount to discount\n\n        Returns:\n            float: the discounted price\n        \"\"\"\n        return self.price * (1 - percentage)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 613513,
          "key": "12a781f3-22fd-4e7e-ad4e-acfec6014578",
          "title": "A Gaussian Class",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12a781f3-22fd-4e7e-ad4e-acfec6014578",
            "completed_at": "2020-03-27T22:01:47.847Z",
            "last_viewed_at": "2020-03-28T00:56:10.349Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613514,
              "key": "13c59cf7-09ed-405e-b887-b20bfe206b4b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#  Gaussian Class\n",
              "instructor_notes": ""
            },
            {
              "id": 693889,
              "key": "63cef239-2402-4c73-bce1-cf12a621a175",
              "title": "Gaussian Class",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TVzNdFYyJIU",
                "china_cdn_id": "TVzNdFYyJIU.mp4"
              }
            },
            {
              "id": 613523,
              "key": "d3980d8d-70dd-43d0-892d-2ff85b9e1e21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Resources for Review\n\nThe example in the next part of the lesson assumes you are familiar with Gaussian and binomial distributions. \n\nHere are a few formulas that might be helpful:\n\n#### Gaussian Distribution Formulas\n\n##### probability density function\n<div class=\"mathquill\">\nf(x \\space | \\space \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^-\\frac{(x-\\mu)^2}{2\\sigma^2}\n</div>\n\n<div class=\"mathquill\">\n\\begin{aligned}\n\\\\ \\text{where:}\n\\\\ \\mu& \\space \\text{is the mean}\n\\\\ \\sigma& \\space \\text{ is the standard deviation} \n\\\\ \\sigma&^2 \\space \\text{is the variance}\n\\end{aligned}\n</div>",
              "instructor_notes": ""
            },
            {
              "id": 671578,
              "key": "1e859fc8-cb2f-48ba-9110-41223deeaa7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Binomial Distribution Formulas\n##### mean\n<div class=\"mathquill\">\\mu = n * p</div>\n\nIn other words, a fair coin has a probability of a positive outcome (heads) p = 0.5. If you flip a coin 20 times, the mean would be 20 * 0.5 = 10; you'd expect to get 10 heads.\n\n##### variance\n<div class=\"mathquill\">\\sigma^2 = n * p * (1 - p)</div>\n\nContinuing with the coin example, n would be the number of coin tosses and p would be the probability of getting heads. \n\n##### standard deviation\n<div class=\"mathquill\">\\sigma = \\sqrt{n * p * (1 - p)}</div>\n\nor in other words, the standard deviation is the square root of the variance.\n\n##### probability density function\n\n<div class=\"mathquill\">\nf(k, n, p) = \\frac{n\\footnotesize{!}}{k!(n - k)!}p^k(1-p)^{(n-k)}\n</div>\n",
              "instructor_notes": ""
            },
            {
              "id": 671579,
              "key": "fe5b0cf4-2e07-4775-afc0-1662e7d50b7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Further Resources\nIf you would like to review the Gaussian (normal) distribution and binomial distribution, here are a few resources:\n\nThis free Udacity course, [Intro to Statistics](https://www.udacity.com/course/intro-to-statistics--st101), has a lesson on Gaussian distributions as well as the Binomial distribution.\n\nThis free course, [Intro to Descriptive Statistics](https://www.udacity.com/course/intro-to-descriptive-statistics--ud827), also has a Gaussian distributions lesson.\n\nHere are the wikipedia articles:\n* [Gaussian Distributions Wikipedia](https://en.wikipedia.org/wiki/Normal_distribution)\n* [Binomial Distributions Wikipedia](https://en.wikipedia.org/wiki/Binomial_distribution)",
              "instructor_notes": ""
            },
            {
              "id": 613525,
              "key": "d4a63e5d-f039-46bd-a138-630b384cadab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quizzes\n\nHere are a few quizzes to help you determine how well you understand the Gaussian and binomial distributions. Even if you can't remember how to answer these types of questions, feel free to move on to the next part of the lesson; however, the material assumes you know what these distributions are and that you know the basics of how to work with them. ",
              "instructor_notes": ""
            },
            {
              "id": 613539,
              "key": "0e968065-dd57-44ad-ad45-5c9732449bb4",
              "title": "Probability",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0e968065-dd57-44ad-ad45-5c9732449bb4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Assume the average weight of an American adult male is 180 pounds with a standard deviation of 34 pounds. The distribution of weights follows a normal distribution. What is the probability that a man weighs exactly 185 pounds?",
                "answers": [
                  {
                    "id": "a1524176871936",
                    "text": "0.56",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177113673",
                    "text": "0",
                    "is_correct": true
                  },
                  {
                    "id": "a1524177114590",
                    "text": "0.44",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177115835",
                    "text": "0.059",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177234309",
                    "text": "I'm not sure how to answer this question",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 613558,
              "key": "15f13f05-e217-4275-86e0-a8e6a8e07db7",
              "title": "Follow up question",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "15f13f05-e217-4275-86e0-a8e6a8e07db7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Like in the previous question, assume the average weight of an American adult male is 180 pounds with a standard deviation of 34 pounds. The distribution of weights follows a normal distribution. What is the probability that a man weighs somewhere between 120 and 155 pounds?",
                "answers": [
                  {
                    "id": "a1524177619761",
                    "text": "0",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177666393",
                    "text": "0.23",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177667222",
                    "text": "0.27",
                    "is_correct": false
                  },
                  {
                    "id": "a1524177667910",
                    "text": "0.19",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 613560,
              "key": "18b7f143-73e0-4d1d-84ba-c4d3a500ecff",
              "title": "Binomial Distribution",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "18b7f143-73e0-4d1d-84ba-c4d3a500ecff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now consider a Binomial distribution. Assume that 15% of the population is allergic to cats. If you randomly select 60 people for a medical trial, what is the probability that 7 of those people are allergic to cats?",
                "answers": [
                  {
                    "id": "a1524178343950",
                    "text": ".01",
                    "is_correct": false
                  },
                  {
                    "id": "a1524178716456",
                    "text": ".14",
                    "is_correct": false
                  },
                  {
                    "id": "a1524178717463",
                    "text": "0",
                    "is_correct": false
                  },
                  {
                    "id": "a1524178718087",
                    "text": ".05",
                    "is_correct": false
                  },
                  {
                    "id": "a1524178722905",
                    "text": "0.12",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 613564,
          "key": "d81546a9-a31b-4d6a-9982-6be34c5e27e4",
          "title": "How the Gaussian Class Works",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d81546a9-a31b-4d6a-9982-6be34c5e27e4",
            "completed_at": "2020-03-27T23:48:40.204Z",
            "last_viewed_at": "2020-03-28T00:18:54.725Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613565,
              "key": "7f4b6027-b0bb-448b-8749-4658e200d6b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How the Gaussian Class Works \n",
              "instructor_notes": ""
            },
            {
              "id": 628511,
              "key": "09c24d27-e4e1-4f98-a698-91aab6ba2808",
              "title": "How The Gaussian Class Works",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "N-5I0d1zJHI",
                "china_cdn_id": "N-5I0d1zJHI.mp4"
              }
            }
          ]
        },
        {
          "id": 613567,
          "key": "e3f2ed5d-99c7-4b67-9aae-c2f57f5a2013",
          "title": "Exercise: Code the Gaussian Class",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e3f2ed5d-99c7-4b67-9aae-c2f57f5a2013",
            "completed_at": "2020-03-27T23:48:46.993Z",
            "last_viewed_at": "2020-03-28T01:16:02.266Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 613570,
              "key": "7d28e953-394e-4c91-9093-3534b9fe1cd2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "7908eb12-19ee-444d-b5cb-fec02b018d94",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/3.OOP_code_gaussian_class/gaussian_code_exercise.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 614629,
          "key": "dd3bdaec-0e9f-4caa-b579-0808e71fd9b8",
          "title": "Magic Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd3bdaec-0e9f-4caa-b579-0808e71fd9b8",
            "completed_at": "2020-03-28T02:50:24.013Z",
            "last_viewed_at": "2020-03-28T03:37:26.788Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614630,
              "key": "9e39aeb4-d4ff-4da4-8d89-21bd26f85ebe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Magic Methods",
              "instructor_notes": ""
            },
            {
              "id": 713551,
              "key": "f32fd5ec-2f80-4e82-ae42-386ab94507a9",
              "title": "L3 10 Magic M V1 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9dEsv1aNUEE",
                "china_cdn_id": "9dEsv1aNUEE.mp4"
              }
            },
            {
              "id": 614631,
              "key": "3c33066a-25ec-48a1-9264-5321267e8422",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Magic Methods in Code",
              "instructor_notes": ""
            },
            {
              "id": 628512,
              "key": "55b81805-6498-489f-a73e-d6210cecfb37",
              "title": "Magic Methods in Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oDuXThOqans",
                "china_cdn_id": "oDuXThOqans.mp4"
              }
            }
          ]
        },
        {
          "id": 614637,
          "key": "36c0c1e4-5253-436a-a958-150226c70c3f",
          "title": "Exercise: Code Magic Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "36c0c1e4-5253-436a-a958-150226c70c3f",
            "completed_at": "2020-03-28T02:50:45.650Z",
            "last_viewed_at": "2020-03-28T03:48:50.789Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614647,
              "key": "6fcc0415-da6c-4d7c-8020-08b1374756e3",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "eedace13-687e-45c9-a914-456ac137756e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/4.OOP_code_magic_methods/magic_methods.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 614701,
          "key": "050879f0-0ff3-4149-8941-d0f8ade47f3e",
          "title": "Inheritance",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "050879f0-0ff3-4149-8941-d0f8ade47f3e",
            "completed_at": "2020-03-28T03:50:50.821Z",
            "last_viewed_at": "2020-03-28T03:55:19.403Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 672330,
              "key": "8097f807-8ce1-41b2-b328-3d98987074bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Inheritance",
              "instructor_notes": ""
            },
            {
              "id": 693899,
              "key": "513da679-5b75-4143-a517-c3de55c5c91b",
              "title": "Inheritance",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1gsrxUwPI40",
                "china_cdn_id": "1gsrxUwPI40.mp4"
              }
            },
            {
              "id": 614703,
              "key": "4eba3a4d-7762-4483-849e-291c931d599e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Inheritance Code\n\nIn the following video, you'll see how to code inheritance using Python.",
              "instructor_notes": ""
            },
            {
              "id": 628513,
              "key": "03d3cdb4-cc0b-4469-b6e7-6e5d253e73fe",
              "title": "13 Inheritance Example V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uWT-HIHBjv0",
                "china_cdn_id": "uWT-HIHBjv0.mp4"
              }
            },
            {
              "id": 626145,
              "key": "9918201b-b3fa-4477-8a93-d3cea9b6fcd5",
              "title": "Inheritance Truth",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9918201b-b3fa-4477-8a93-d3cea9b6fcd5",
                "completed_at": "2020-03-28T03:52:57.978Z",
                "last_viewed_at": "2020-03-28T03:52:57.978Z",
                "unstructured": "{\"selected_ids\":[\"a1525735834071\",\"a1525735870019\",\"a1525735870915\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "Check the boxes next to the statements that are true.",
                "answers": [
                  {
                    "id": "a1525735834071",
                    "text": "Inheritance helps organize code with a more general version of a class and then specific children.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525735869251",
                    "text": "Inheritance makes code much more difficult to maintain.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525735870019",
                    "text": "Inheritance can make object-oriented programs more efficient to write.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525735870915",
                    "text": "Updates to a parent class automatically trickle down to its children.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 614704,
          "key": "c96d2618-3046-408f-b440-2d3adaf5f52d",
          "title": "Exercise: Inheritance with Clothing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c96d2618-3046-408f-b440-2d3adaf5f52d",
            "completed_at": "2020-03-28T03:53:54.116Z",
            "last_viewed_at": "2020-03-28T03:56:07.428Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614714,
              "key": "45e467e9-1b62-4c38-bc11-bcc7ad2abd38",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "9bb8c1d6-c852-485a-8a94-1cdf1d321a9c",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/5.OOP_code_inheritance_clothing/inheritance_exercise_clothing.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 614752,
          "key": "30120037-1bf8-46c4-9e7b-38e714da2949",
          "title": "Inheritance: Probability Distribution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "30120037-1bf8-46c4-9e7b-38e714da2949",
            "completed_at": "2020-03-28T04:02:21.101Z",
            "last_viewed_at": "2020-03-28T04:03:46.009Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614754,
              "key": "b2ad039a-0589-4ffc-a03c-1f2c2b5acbb0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Inheritance Gaussian Class",
              "instructor_notes": ""
            },
            {
              "id": 628514,
              "key": "d35ed7d3-5a25-4e09-b434-842463a321e6",
              "title": "Inheritance Gaussian Class",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XS4LQn1VA3U",
                "china_cdn_id": "XS4LQn1VA3U.mp4"
              }
            }
          ]
        },
        {
          "id": 614755,
          "key": "f6b34f54-a9f1-4eca-b8b1-a725eac21bc3",
          "title": "Demo: Inheritance Probability Distributions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f6b34f54-a9f1-4eca-b8b1-a725eac21bc3",
            "completed_at": "2020-03-28T04:02:47.435Z",
            "last_viewed_at": "2020-03-28T04:05:55.743Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614758,
              "key": "adba3139-288a-4d54-bbe6-95d2371d17c5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewad57d566",
              "pool_id": "jupyter",
              "view_id": "88e68367-2a38-42a8-9ed1-8b7739d82604",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/6.OOP_code_inheritance_probability_distributions/inheritance_probability_distribution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 672332,
          "key": "06cdaa83-2994-40bc-bd2d-3e66016abb4f",
          "title": "Advanced OOP Topics",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06cdaa83-2994-40bc-bd2d-3e66016abb4f",
            "completed_at": "2020-03-28T04:06:32.291Z",
            "last_viewed_at": "2020-03-28T04:07:29.164Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 672333,
              "key": "3dde0287-5bb4-4449-adc5-120440ec2181",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Advanced OOP Topics\n\nInheritance is the last object-oriented programming topic in the lesson. Thus far you've been exposed to:\n* classes and objects\n* attributes and methods\n* magic methods\n* inheritance\n\nClasses, object, attributes, methods, and inheritance are common to all object-oriented programming languages.  \n\nKnowing these topics is enough to start writing object-oriented software. What you've learned so far is all you need to know to complete this OOP lesson. However, these are only the fundamentals of object-oriented programming. \n\nHere is a list of resources for advanced Python object-oriented programming topics. \n* [class methods, instance methods, and static methods](https://realpython.com/instance-class-and-static-methods-demystified/) - these are different types of methods that can be accessed at the class or object level\n* [class attributes vs instance attributes](https://www.python-course.eu/python3_class_and_instance_attributes.php) - you can also define attributes at the class level or at the instance level\n* [multiple inheritance, mixins](https://easyaspython.com/mixins-for-fun-and-profit-cb9962760556) - A class can inherit from multiple parent classes\n* [Python decorators](https://realpython.com/primer-on-python-decorators/) - Decorators are a short-hand way for using functions inside other functions",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}